uint8_t rom[] = {

// 0: #name x i1

// 0: #name y i2

// 0: #name pixel i3

// 0: #name color i4

// 0: push 0
0x2, 0x0, 0x0, 0x0, 0x0, 
// 5: pop y
0x3, 0x2, 
// 7: #here for_y

// 7: push 0
0x2, 0x0, 0x0, 0x0, 0x0, 
// 12: pop x
0x3, 0x1, 
// 14: #here for_x

// 14: push 0x50003
0x2, 0x3, 0x0, 0x5, 0x0, 
// 19: read
0x7, 
// 20: push 128
0x2, 0x80, 0x0, 0x0, 0x0, 
// 25: jl black
0x6, 0xb, 0x0, 
// 28: push 0x00202020
0x2, 0x20, 0x20, 0x20, 0x0, 
// 33: jmp endif
0x9, 0x8, 0x0, 
// 36: #here black

// 36: push 0x0
0x2, 0x0, 0x0, 0x0, 0x0, 
// 41: #here endif

// 41: push y
0x1, 0x2, 
// 43: push 8
0x2, 0x8, 0x0, 0x0, 0x0, 
// 48: mul
0x5, 
// 49: push x
0x1, 0x1, 
// 51: add
0x4, 
// 52: push 4
0x2, 0x4, 0x0, 0x0, 0x0, 
// 57: mul
0x5, 
// 58: push 0x10004
0x2, 0x4, 0x0, 0x1, 0x0, 
// 63: add
0x4, 
// 64: write
0x8, 
// 65: push x
0x1, 0x1, 
// 67: push 1
0x2, 0x1, 0x0, 0x0, 0x0, 
// 72: add
0x4, 
// 73: pop x
0x3, 0x1, 
// 75: push x
0x1, 0x1, 
// 77: push 8
0x2, 0x8, 0x0, 0x0, 0x0, 
// 82: jl for_x
0x6, 0xbc, 0xff, 
// 85: push y
0x1, 0x2, 
// 87: push 1
0x2, 0x1, 0x0, 0x0, 0x0, 
// 92: add
0x4, 
// 93: pop y
0x3, 0x2, 
// 95: push y
0x1, 0x2, 
// 97: push 8
0x2, 0x8, 0x0, 0x0, 0x0, 
// 102: jl for_y
0x6, 0xa1, 0xff, 



// padding
0,0,0,0,0,0,0,
};